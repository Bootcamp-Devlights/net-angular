// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Clase13_ReverseEngineering.Models
{
    public partial class InterviewAppDatabaseContext : DbContext
    {
        public InterviewAppDatabaseContext()
        {
        }

        public InterviewAppDatabaseContext(DbContextOptions<InterviewAppDatabaseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Ansewers> Ansewers { get; set; }
        public virtual DbSet<Interviewees> Interviewees { get; set; }
        public virtual DbSet<Interviewers> Interviewers { get; set; }
        public virtual DbSet<Intreviews> Intreviews { get; set; }
        public virtual DbSet<Questions> Questions { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Ansewers>(entity =>
            {
                entity.HasIndex(e => e.QuestionId, "IX_Ansewers_QuestionId");

                entity.HasOne(d => d.Question)
                    .WithMany(p => p.Ansewers)
                    .HasForeignKey(d => d.QuestionId);
            });

            modelBuilder.Entity<Interviewees>(entity =>
            {
                entity.Property(e => e.FirstName).IsRequired(false);

                entity.Property(e => e.LastName).IsRequired();
            });

            modelBuilder.Entity<Interviewers>(entity =>
            {
                entity.Property(e => e.FirstName).IsRequired();

                entity.Property(e => e.LastName).IsRequired();

                entity.HasMany(d => d.Interviews)
                    .WithMany(p => p.Interviewers)
                    .UsingEntity<Dictionary<string, object>>(
                        "InterviewInterviewer",
                        l => l.HasOne<Intreviews>().WithMany().HasForeignKey("InterviewsId"),
                        r => r.HasOne<Interviewers>().WithMany().HasForeignKey("InterviewersId"),
                        j =>
                        {
                            j.HasKey("InterviewersId", "InterviewsId");

                            j.ToTable("InterviewInterviewer");

                            j.HasIndex(new[] { "InterviewsId" }, "IX_InterviewInterviewer_InterviewsId");
                        });
            });

            modelBuilder.Entity<Intreviews>(entity =>
            {
                entity.HasIndex(e => e.IntervieweeId, "IX_Intreviews_IntervieweeId");

                entity.Property(e => e.Score).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Interviewee)
                    .WithMany(p => p.Intreviews)
                    .HasForeignKey(d => d.IntervieweeId);

                entity.HasMany(d => d.Questions)
                    .WithMany(p => p.Intreviews)
                    .UsingEntity<Dictionary<string, object>>(
                        "InterviewQuestion",
                        l => l.HasOne<Questions>().WithMany().HasForeignKey("QuestionsId"),
                        r => r.HasOne<Intreviews>().WithMany().HasForeignKey("IntreviewsId"),
                        j =>
                        {
                            j.HasKey("IntreviewsId", "QuestionsId");

                            j.ToTable("InterviewQuestion");

                            j.HasIndex(new[] { "QuestionsId" }, "IX_InterviewQuestion_QuestionsId");
                        });
            });

            modelBuilder.Entity<Questions>(entity =>
            {
                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasDefaultValueSql("(N'')");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}